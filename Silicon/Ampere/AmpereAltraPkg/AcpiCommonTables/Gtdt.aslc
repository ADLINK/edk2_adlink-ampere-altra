/** @file

  Copyright (c) 2020 - 2021, Ampere Computing LLC. All rights reserved.<BR>

  SPDX-License-Identifier: BSD-2-Clause-Patent

**/

#include <Library/PcdLib.h>
#include <Library/AcpiLib.h>
#include <IndustryStandard/Acpi63.h>
#include <AcpiHeader.h>

#define SYSTEM_TIMER_BASE_ADDRESS       0xFFFFFFFFFFFFFFFF
#define CNT_READ_BASE_ADDRESS           0xFFFFFFFFFFFFFFFF

#define SECURE_TIMER_EL1_GSIV           0x1D
#define NON_SECURE_TIMER_EL1_GSIV       0x1E
#define VIRTUAL_TIMER_GSIV              0x1B
#define NON_SECURE_EL2_GSIV             0x1A

#define GTDT_TIMER_EDGE_TRIGGERED   EFI_ACPI_6_3_GTDT_TIMER_FLAG_TIMER_INTERRUPT_MODE
#define GTDT_TIMER_LEVEL_TRIGGERED  0
#define GTDT_TIMER_ACTIVE_LOW       EFI_ACPI_6_3_GTDT_TIMER_FLAG_TIMER_INTERRUPT_POLARITY
#define GTDT_TIMER_ACTIVE_HIGH      0
#define GTDT_TIMER_SAVE_CONTEXT     EFI_ACPI_6_3_GTDT_TIMER_FLAG_ALWAYS_ON_CAPABILITY
#define GTDT_TIMER_LOSE_CONTEXT     0

#define GTDT_GTIMER_FLAGS          (GTDT_TIMER_LOSE_CONTEXT | GTDT_TIMER_ACTIVE_HIGH | GTDT_TIMER_LEVEL_TRIGGERED)

#define WATCHDOG_COUNT              FixedPcdGet32 (PcdWatchdogCount)
#define PLATFORM_TIMER_COUNT        (WATCHDOG_COUNT + 1)
#define TIMER_FRAMES_COUNT          3

#define GT_BLOCK_CTL_BASE               0x0000100002700000
#define GT_BLOCK_FRAME0_CTL_BASE        0x0000100002710000
#define GT_BLOCK_FRAME0_CTL_EL0_BASE    0xFFFFFFFFFFFFFFFF
#define GT_BLOCK_FRAME0_GSIV            0x58

#define GT_BLOCK_FRAME1_CTL_BASE        0x0000100002720000
#define GT_BLOCK_FRAME1_CTL_EL0_BASE    0xFFFFFFFFFFFFFFFF
#define GT_BLOCK_FRAME1_GSIV            0x59

#define GT_BLOCK_FRAME2_CTL_BASE        0x0000100002730000
#define GT_BLOCK_FRAME2_CTL_EL0_BASE    0xFFFFFFFFFFFFFFFF
#define GT_BLOCK_FRAME2_GSIV            0x5A

#define GTX_TIMER_EDGE_TRIGGERED        EFI_ACPI_6_3_GTDT_GT_BLOCK_TIMER_FLAG_TIMER_INTERRUPT_MODE
#define GTX_TIMER_LEVEL_TRIGGERED       0
#define GTX_TIMER_ACTIVE_LOW            EFI_ACPI_6_3_GTDT_GT_BLOCK_TIMER_FLAG_TIMER_INTERRUPT_POLARITY
#define GTX_TIMER_ACTIVE_HIGH           0

#define GTX_TIMER_FLAGS                 (GTX_TIMER_ACTIVE_HIGH | GTX_TIMER_LEVEL_TRIGGERED)

#define GTX_TIMER_SECURE                EFI_ACPI_6_3_GTDT_GT_BLOCK_COMMON_FLAG_SECURE_TIMER
#define GTX_TIMER_NON_SECURE            0
#define GTX_TIMER_SAVE_CONTEXT          EFI_ACPI_6_3_GTDT_GT_BLOCK_COMMON_FLAG_ALWAYS_ON_CAPABILITY
#define GTX_TIMER_LOSE_CONTEXT          0

#define GTX_COMMON_FLAGS_S              (GTX_TIMER_SAVE_CONTEXT | GTX_TIMER_SECURE)
#define GTX_COMMON_FLAGS_NS             (GTX_TIMER_SAVE_CONTEXT | GTX_TIMER_NON_SECURE)

#define SBSA_WATCHDOG_REFRESH_BASE     0x00001000027D0000
#define SBSA_WATCHDOG_CONTROL_BASE     0x00001000027C0000
#define SBSA_WATCHDOG_GSIV             0x5C

#define SBSA_WATCHDOG_EDGE_TRIGGERED   EFI_ACPI_6_3_GTDT_SBSA_GENERIC_WATCHDOG_FLAG_TIMER_INTERRUPT_MODE
#define SBSA_WATCHDOG_LEVEL_TRIGGERED  0
#define SBSA_WATCHDOG_ACTIVE_LOW       EFI_ACPI_6_3_GTDT_SBSA_GENERIC_WATCHDOG_FLAG_TIMER_INTERRUPT_POLARITY
#define SBSA_WATCHDOG_ACTIVE_HIGH      0
#define SBSA_WATCHDOG_SECURE           EFI_ACPI_6_3_GTDT_SBSA_GENERIC_WATCHDOG_FLAG_SECURE_TIMER
#define SBSA_WATCHDOG_NON_SECURE       0

#define SBSA_WATCHDOG_FLAGS            (SBSA_WATCHDOG_NON_SECURE | SBSA_WATCHDOG_ACTIVE_HIGH | SBSA_WATCHDOG_LEVEL_TRIGGERED)

#pragma pack (1)

typedef struct {
  EFI_ACPI_6_3_GENERIC_TIMER_DESCRIPTION_TABLE          Gtdt;
  EFI_ACPI_6_3_GTDT_GT_BLOCK_STRUCTURE                  GtBlock;
  EFI_ACPI_6_3_GTDT_GT_BLOCK_TIMER_STRUCTURE            Frames[TIMER_FRAMES_COUNT];
#if (WATCHDOG_COUNT != 0)
  EFI_ACPI_6_3_GTDT_SBSA_GENERIC_WATCHDOG_STRUCTURE     Watchdogs[WATCHDOG_COUNT];
#endif
} EFI_ACPI_6_3_GENERIC_TIMER_DESCRIPTION_TABLES;

#pragma pack ()

EFI_ACPI_6_3_GENERIC_TIMER_DESCRIPTION_TABLES Gtdt = {
  {
    __ACPI_HEADER (
      EFI_ACPI_6_3_GENERIC_TIMER_DESCRIPTION_TABLE_SIGNATURE,
      EFI_ACPI_6_3_GENERIC_TIMER_DESCRIPTION_TABLES,
      EFI_ACPI_6_3_GENERIC_TIMER_DESCRIPTION_TABLE_REVISION
    ),
    SYSTEM_TIMER_BASE_ADDRESS,                              // UINT64  CntControlBasePhysicalAddress
    EFI_ACPI_RESERVED_DWORD,                                // UINT32  Reserved
    SECURE_TIMER_EL1_GSIV,                                  // UINT32  SecurePL1TimerGSIV
    GTDT_GTIMER_FLAGS,                                      // UINT32  SecurePL1TimerFlags
    NON_SECURE_TIMER_EL1_GSIV,                              // UINT32  NonSecurePL1TimerGSIV
    GTDT_GTIMER_FLAGS,                                      // UINT32  NonSecurePL1TimerFlags
    VIRTUAL_TIMER_GSIV,                                     // UINT32  VirtualTimerGSIV
    GTDT_GTIMER_FLAGS,                                      // UINT32  VirtualTimerFlags
    NON_SECURE_EL2_GSIV,                                    // UINT32  NonSecurePL2TimerGSIV
    GTDT_GTIMER_FLAGS,                                      // UINT32  NonSecurePL2TimerFlags
    CNT_READ_BASE_ADDRESS,                                  // UINT64  CntReadBasePhysicalAddress
    PLATFORM_TIMER_COUNT,                                   // UINT32  PlatformTimerCount
    sizeof (EFI_ACPI_6_3_GENERIC_TIMER_DESCRIPTION_TABLE),  // UINT32  PlatformTimerOffset
  },
  {
    EFI_ACPI_6_3_GTDT_GT_BLOCK,                           // UINT8 Type
    sizeof(EFI_ACPI_6_3_GTDT_GT_BLOCK_STRUCTURE)          // UINT16 Length
      + sizeof(EFI_ACPI_6_3_GTDT_GT_BLOCK_TIMER_STRUCTURE) *
        TIMER_FRAMES_COUNT,
    EFI_ACPI_RESERVED_BYTE,                               // UINT8 Reserved
    GT_BLOCK_CTL_BASE,                                    // UINT64 CntCtlBase
    TIMER_FRAMES_COUNT,                                   // UINT32 GTBlockTimerCount
    sizeof(EFI_ACPI_6_3_GTDT_GT_BLOCK_STRUCTURE)          // UINT32 GTBlockTimerOffset
  },
  {
    {
      0,                                                    // UINT8 GTFrameNumber
      {EFI_ACPI_RESERVED_BYTE,
       EFI_ACPI_RESERVED_BYTE,
       EFI_ACPI_RESERVED_BYTE},                             // UINT8 Reserved[3]
      GT_BLOCK_FRAME0_CTL_BASE,                             // UINT64 CntBaseX
      GT_BLOCK_FRAME0_CTL_EL0_BASE,                         // UINT64 CntEL0BaseX
      GT_BLOCK_FRAME0_GSIV,                                 // UINT32 GTxPhysicalTimerGSIV
      GTX_TIMER_FLAGS,                                      // UINT32 GTxPhysicalTimerFlags
      0,                                                    // UINT32 GTxVirtualTimerGSIV
      0,                                                    // UINT32 GTxVirtualTimerFlags
      GTX_COMMON_FLAGS_NS                                   // UINT32 GTxCommonFlags
    },
    {
      1,                                                    // UINT8 GTFrameNumber
      {EFI_ACPI_RESERVED_BYTE,
       EFI_ACPI_RESERVED_BYTE,
       EFI_ACPI_RESERVED_BYTE},                             // UINT8 Reserved[3]
      GT_BLOCK_FRAME1_CTL_BASE,                             // UINT64 CntBaseX
      GT_BLOCK_FRAME1_CTL_EL0_BASE,                         // UINT64 CntEL0BaseX
      GT_BLOCK_FRAME1_GSIV,                                 // UINT32 GTxPhysicalTimerGSIV
      GTX_TIMER_FLAGS,                                      // UINT32 GTxPhysicalTimerFlags
      0,                                                    // UINT32 GTxVirtualTimerGSIV
      0,                                                    // UINT32 GTxVirtualTimerFlags
      GTX_COMMON_FLAGS_NS                                   // UINT32 GTxCommonFlags
    },
    {
      2,                                                    // UINT8 GTFrameNumber
      {EFI_ACPI_RESERVED_BYTE,
       EFI_ACPI_RESERVED_BYTE,
       EFI_ACPI_RESERVED_BYTE},                             // UINT8 Reserved[3]
      GT_BLOCK_FRAME2_CTL_BASE,                             // UINT64 CntBaseX
      GT_BLOCK_FRAME2_CTL_EL0_BASE,                         // UINT64 CntEL0BaseX
      GT_BLOCK_FRAME2_GSIV,                                 // UINT32 GTxPhysicalTimerGSIV
      GTX_TIMER_FLAGS,                                      // UINT32 GTxPhysicalTimerFlags
      0,                                                    // UINT32 GTxVirtualTimerGSIV
      0,                                                    // UINT32 GTxVirtualTimerFlags
      GTX_COMMON_FLAGS_NS                                   // UINT32 GTxCommonFlags
    },
  },
#if (WATCHDOG_COUNT != 0)
  {
    {
      EFI_ACPI_6_3_GTDT_SBSA_GENERIC_WATCHDOG,                      // UINT8 Type
      sizeof(EFI_ACPI_6_3_GTDT_SBSA_GENERIC_WATCHDOG_STRUCTURE),    // UINT16 Length
      EFI_ACPI_RESERVED_BYTE,                                       // UINT8 Reserved
      SBSA_WATCHDOG_REFRESH_BASE,                                   // UINT64 RefreshFramePhysicalAddress
      SBSA_WATCHDOG_CONTROL_BASE,                                   // UINT64 WatchdogControlFramePhysicalAddress
      SBSA_WATCHDOG_GSIV,                                           // UINT32 WatchdogTimerGSIV
      SBSA_WATCHDOG_FLAGS                                           // UINT32 WatchdogTimerFlags
    }
  }
#endif
};

//
// Reference the table being generated to prevent the optimizer from removing the
// data structure from the executable
//
VOID* CONST ReferenceAcpiTable = &Gtdt;
